#!/bin/sh

set -eu

indent() {
  sed -u 's/^/       /'
}

export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH|JAVA_OPTS)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

BP_DIR="$(cd "$(dirname "$0")" && pwd)"
BUILD_DIR=$1
CACHE_DIR=$2
OPT_DIR=$BP_DIR/../opt/

export_env_dir $3

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"
APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"

echo "-----> Installing NodeJS"
VERSION="6.11.5"
NAME=node-v${VERSION}-linux-x64
FILE=${NAME}.tar.gz
if ! [ -e $CACHE_DIR/$FILE ]; then
  echo "-----> Downloading NodeJS binaries"
  curl https://nodejs.org/dist/v${VERSION}/${FILE} -L -s -o $CACHE_DIR/$FILE
fi

echo "-----> Extracting NodeJS"
mkdir -p $CACHE_DIR/$NAME
mkdir -p $BUILD_DIR/vendor
tar -xf $CACHE_DIR/$FILE -C $CACHE_DIR
mv $CACHE_DIR/$NAME $BUILD_DIR/vendor/nodejs

echo "-----> Exporting NodeJS PATHs"
PROFILE="$BUILD_DIR/.profile.d/nodejs.sh"
mkdir -p $(dirname $PROFILE)
echo 'export PATH="$PATH:$HOME/vendor/nodejs/bin"' >> $PROFILE

echo "-----> Installing s3cmd"
apt-get $APT_OPTIONS update | indent
apt-get $APT_OPTIONS -y --force-yes -d install --reinstall s3cmd | indent
echo "-----> Installing screen... "
apt-get $APT_OPTIONS -y --force-yes -d install --reinstall screen | indent
mkdir -p $BUILD_DIR/.apt/var/run/screen

mkdir -p $BUILD_DIR/.profile.d
cat <<EOF >$BUILD_DIR/.profile.d/000_apt.sh
export PATH="\$HOME/.apt/usr/bin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/.apt/usr/include:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
export PYTHONPATH="\$HOME/.apt/usr/lib/python2.7/dist-packages"
export SCREENDIR="\$HOME/.apt/var/run/screen"
EOF

for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  dpkg -x $DEB $BUILD_DIR/.apt/
done

echo -n "-----> Installing ngrok... "
curl --silent -o ngrok.zip -L "https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip" | indent
unzip ngrok.zip -d $BUILD_DIR/bin > /dev/null 2>&1
echo "done"

echo -n "-----> Installing Dropbox... "
curl --silent -o dropbox_uploader.sh -L "https://raw.githubusercontent.com/andreafabrizi/Dropbox-Uploader/master/dropbox_uploader.sh" | indent
mv dropbox_uploader.sh $BUILD_DIR/bin
echo "done"

if [ ! "${CUSTOM_MINECRAFT_VERSION:-""}" ]; then
  minecraft_version=${MINECRAFT_VERSION:-"1.12.2"}
  minecraft_url="https://s3.amazonaws.com/Minecraft.Download/versions/${minecraft_version}/minecraft_server.${minecraft_version}.jar"
  minecraft_url="https://launcher.mojang.com/mc/game/18w20b/server/35304e17de5fbe503b10bad50192d14a38e5cec0/server.jar"
  echo -n "-----> Installing Minecraft ${minecraft_version}... "
  curl -o minecraft.jar -s -L $minecraft_url
  mv minecraft.jar $BUILD_DIR/minecraft.jar
  echo "done"
fi

if [ -n "${MINECRAFT_EULA:-""}" ]; then
  echo -n "-----> Accepting Minecraft EULA... "
  echo "eula=true" >> $BUILD_DIR/eula.txt
  echo "done"
fi

mkdir -p $BUILD_DIR/bin
[ ! -f $BUILD_DIR/bin/minecraft ]   && cp $OPT_DIR/minecraft $BUILD_DIR/bin
[ ! -f $BUILD_DIR/bin/sync ]        && cp $OPT_DIR/sync $BUILD_DIR/bin
[ ! -f $BUILD_DIR/bin/index.js ]        && cp $OPT_DIR/index.js $BUILD_DIR/bin
[ ! -f $BUILD_DIR/bin/server.js ]        && cp $OPT_DIR/server.js $BUILD_DIR/bin

chmod +x $BUILD_DIR/bin/minecraft
chmod +x $BUILD_DIR/bin/sync
